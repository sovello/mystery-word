
The computer must select a word at random from the list of words in the file /usr/share/dict/words. This file exists on your computer already.
Computer:
 #select a word from list
 #get words from file into a list

The game must be interactive; the flow of the game should go as follows:

    Let the user choose a level of difficulty at the beginning of the program. Easy mode only has words of 4-6 characters; normal mode only has
    words of 6-8 characters; hard mode only has words of 8+ characters.

Play:
#User selects level of difficulty
#computer selects words from the difficulty level

    At the start of the game, let the user know how many letters the computer's word contains.
Computer
#tell user how  many letters the selected word has
    Ask the user to supply one guess (i.e. letter) per round. This letter can be upper or lower case and it should not matter. If a user enters
    more than one letter, tell them the input is invalid and let them try again.
Interaction:
#ask user to supply a guess (case insensitive)
#only one letter is allowed
    #if more than one, request for another input
    Let the user know if their guess appears in the computer's word.
#if letter in word, notify user

    Display the partially guessed word, as well as letters that have not been guessed. For example, if the word is BOMBARD and the letters
    guessed are a, b, and d, the screen should display:
#display the partially guessed part of the word, with placeholders for remaining letters
B _ _ B A _ D

conditions:
# maximum guesses is 8, let user know the guesses balance
A user is allowed 8 guesses. Remind the user of how many guesses they have left after each round.

#if guess (character) is incorrect, lose guess counts, else keep what is available
A user loses a guess only when they guess incorrectly. If they guess a letter that is in the computer's word, they do not lose a guess.

#user repeats same guess and is not in the word, don't take away the guess this time, give them another chance to guess
If the user guesses the same letter twice, do not take away a guess. Instead, print a message letting them know they've already guessed that
letter and ask them to try again.

#end the game when number of guesses is ZERO or when the word is complete
The game should end when the user constructs the full word or runs out of guesses. If the player runs out of guesses, reveal the word to
the user when the game ends.
# let the user know the way they were trying to guess

When a game ends, ask the user if they want to play again. The game begins again if they reply positively.
#when the game ends, ask the user if they want to play it again
